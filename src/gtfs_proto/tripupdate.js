/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.transit_realtime.TripUpdate');
goog.provide('proto.transit_realtime.TripUpdate.StopTimeEvent');
goog.provide('proto.transit_realtime.TripUpdate.StopTimeUpdate');
goog.provide('proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship');
goog.provide('proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties');
goog.provide('proto.transit_realtime.TripUpdate.TripProperties');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.transit_realtime.TripDescriptor');
goog.require('proto.transit_realtime.VehicleDescriptor');

goog.forwardDeclare('proto.transit_realtime.VehiclePosition.OccupancyStatus');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.TripUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 7, proto.transit_realtime.TripUpdate.repeatedFields_, null);
};
goog.inherits(proto.transit_realtime.TripUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transit_realtime.TripUpdate.displayName = 'proto.transit_realtime.TripUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.transit_realtime.TripUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.TripUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.TripUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.TripUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    trip: (f = msg.getTrip()) && proto.transit_realtime.TripDescriptor.toObject(includeInstance, f),
    vehicle: (f = msg.getVehicle()) && proto.transit_realtime.VehicleDescriptor.toObject(includeInstance, f),
    stopTimeUpdateList: jspb.Message.toObjectList(msg.getStopTimeUpdateList(),
    proto.transit_realtime.TripUpdate.StopTimeUpdate.toObject, includeInstance),
    timestamp: jspb.Message.getField(msg, 4),
    delay: jspb.Message.getField(msg, 5),
    tripProperties: (f = msg.getTripProperties()) && proto.transit_realtime.TripUpdate.TripProperties.toObject(includeInstance, f)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.TripUpdate.extensions, proto.transit_realtime.TripUpdate.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.TripUpdate}
 */
proto.transit_realtime.TripUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.TripUpdate;
  return proto.transit_realtime.TripUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.TripUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.TripUpdate}
 */
proto.transit_realtime.TripUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transit_realtime.TripDescriptor;
      reader.readMessage(value,proto.transit_realtime.TripDescriptor.deserializeBinaryFromReader);
      msg.setTrip(value);
      break;
    case 3:
      var value = new proto.transit_realtime.VehicleDescriptor;
      reader.readMessage(value,proto.transit_realtime.VehicleDescriptor.deserializeBinaryFromReader);
      msg.setVehicle(value);
      break;
    case 2:
      var value = new proto.transit_realtime.TripUpdate.StopTimeUpdate;
      reader.readMessage(value,proto.transit_realtime.TripUpdate.StopTimeUpdate.deserializeBinaryFromReader);
      msg.addStopTimeUpdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDelay(value);
      break;
    case 6:
      var value = new proto.transit_realtime.TripUpdate.TripProperties;
      reader.readMessage(value,proto.transit_realtime.TripUpdate.TripProperties.deserializeBinaryFromReader);
      msg.setTripProperties(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.transit_realtime.TripUpdate.extensionsBinary,
        proto.transit_realtime.TripUpdate.prototype.getExtension,
        proto.transit_realtime.TripUpdate.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.TripUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.TripUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.TripUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrip();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.transit_realtime.TripDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getVehicle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.transit_realtime.VehicleDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getStopTimeUpdateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.transit_realtime.TripUpdate.StopTimeUpdate.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTripProperties();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transit_realtime.TripUpdate.TripProperties.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.TripUpdate.extensionsBinary, proto.transit_realtime.TripUpdate.prototype.getExtension);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.TripUpdate.StopTimeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, null, null);
};
goog.inherits(proto.transit_realtime.TripUpdate.StopTimeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transit_realtime.TripUpdate.StopTimeEvent.displayName = 'proto.transit_realtime.TripUpdate.StopTimeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.TripUpdate.StopTimeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.TripUpdate.StopTimeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    delay: jspb.Message.getField(msg, 1),
    time: jspb.Message.getField(msg, 2),
    uncertainty: jspb.Message.getField(msg, 3)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.TripUpdate.StopTimeEvent.extensions, proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.TripUpdate.StopTimeEvent;
  return proto.transit_realtime.TripUpdate.StopTimeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDelay(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUncertainty(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.transit_realtime.TripUpdate.StopTimeEvent.extensionsBinary,
        proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getExtension,
        proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.TripUpdate.StopTimeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.TripUpdate.StopTimeEvent.extensionsBinary, proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getExtension);
};


/**
 * optional int32 delay = 1;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.setDelay = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.clearDelay = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 uncertainty = 3;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.getUncertainty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.setUncertainty = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.clearUncertainty = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.prototype.hasUncertainty = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeEvent.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 8, null, null);
};
goog.inherits(proto.transit_realtime.TripUpdate.StopTimeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transit_realtime.TripUpdate.StopTimeUpdate.displayName = 'proto.transit_realtime.TripUpdate.StopTimeUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.TripUpdate.StopTimeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    stopSequence: jspb.Message.getField(msg, 1),
    stopId: jspb.Message.getField(msg, 4),
    arrival: (f = msg.getArrival()) && proto.transit_realtime.TripUpdate.StopTimeEvent.toObject(includeInstance, f),
    departure: (f = msg.getDeparture()) && proto.transit_realtime.TripUpdate.StopTimeEvent.toObject(includeInstance, f),
    departureOccupancyStatus: jspb.Message.getField(msg, 7),
    scheduleRelationship: jspb.Message.getFieldWithDefault(msg, 5, 0),
    stopTimeProperties: (f = msg.getStopTimeProperties()) && proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.toObject(includeInstance, f)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.TripUpdate.StopTimeUpdate.extensions, proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.TripUpdate.StopTimeUpdate;
  return proto.transit_realtime.TripUpdate.StopTimeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStopSequence(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopId(value);
      break;
    case 2:
      var value = new proto.transit_realtime.TripUpdate.StopTimeEvent;
      reader.readMessage(value,proto.transit_realtime.TripUpdate.StopTimeEvent.deserializeBinaryFromReader);
      msg.setArrival(value);
      break;
    case 3:
      var value = new proto.transit_realtime.TripUpdate.StopTimeEvent;
      reader.readMessage(value,proto.transit_realtime.TripUpdate.StopTimeEvent.deserializeBinaryFromReader);
      msg.setDeparture(value);
      break;
    case 7:
      var value = /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (reader.readEnum());
      msg.setDepartureOccupancyStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship} */ (reader.readEnum());
      msg.setScheduleRelationship(value);
      break;
    case 6:
      var value = new proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties;
      reader.readMessage(value,proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.deserializeBinaryFromReader);
      msg.setStopTimeProperties(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.transit_realtime.TripUpdate.StopTimeUpdate.extensionsBinary,
        proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getExtension,
        proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.TripUpdate.StopTimeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArrival();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.transit_realtime.TripUpdate.StopTimeEvent.serializeBinaryToWriter
    );
  }
  f = message.getDeparture();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.transit_realtime.TripUpdate.StopTimeEvent.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {!proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStopTimeProperties();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.TripUpdate.StopTimeUpdate.extensionsBinary, proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getExtension);
};


/**
 * @enum {number}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship = {
  SCHEDULED: 0,
  SKIPPED: 1,
  NO_DATA: 2,
  UNSCHEDULED: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.displayName = 'proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignedStopId: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.extensions, proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties;
  return proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssignedStopId(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.extensionsBinary,
        proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.getExtension,
        proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.extensionsBinary, proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.getExtension);
};


/**
 * optional string assigned_stop_id = 1;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.getAssignedStopId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.setAssignedStopId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.clearAssignedStopId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.prototype.hasAssignedStopId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.extensionsBinary = {};

/**
 * optional uint32 stop_sequence = 1;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getStopSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setStopSequence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearStopSequence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasStopSequence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stop_id = 4;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getStopId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setStopId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearStopId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasStopId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StopTimeEvent arrival = 2;
 * @return {?proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getArrival = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.StopTimeEvent} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripUpdate.StopTimeEvent, 2));
};


/** @param {?proto.transit_realtime.TripUpdate.StopTimeEvent|undefined} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setArrival = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearArrival = function() {
  this.setArrival(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasArrival = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StopTimeEvent departure = 3;
 * @return {?proto.transit_realtime.TripUpdate.StopTimeEvent}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getDeparture = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.StopTimeEvent} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripUpdate.StopTimeEvent, 3));
};


/** @param {?proto.transit_realtime.TripUpdate.StopTimeEvent|undefined} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setDeparture = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearDeparture = function() {
  this.setDeparture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasDeparture = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VehiclePosition.OccupancyStatus departure_occupancy_status = 7;
 * @return {!proto.transit_realtime.VehiclePosition.OccupancyStatus}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getDepartureOccupancyStatus = function() {
  return /** @type {!proto.transit_realtime.VehiclePosition.OccupancyStatus} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.transit_realtime.VehiclePosition.OccupancyStatus} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setDepartureOccupancyStatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearDepartureOccupancyStatus = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasDepartureOccupancyStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ScheduleRelationship schedule_relationship = 5;
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getScheduleRelationship = function() {
  return /** @type {!proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setScheduleRelationship = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearScheduleRelationship = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasScheduleRelationship = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StopTimeProperties stop_time_properties = 6;
 * @return {?proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.getStopTimeProperties = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties, 6));
};


/** @param {?proto.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties|undefined} value */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.setStopTimeProperties = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.clearStopTimeProperties = function() {
  this.setStopTimeProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.prototype.hasStopTimeProperties = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.TripUpdate.StopTimeUpdate.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transit_realtime.TripUpdate.TripProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 5, null, null);
};
goog.inherits(proto.transit_realtime.TripUpdate.TripProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.transit_realtime.TripUpdate.TripProperties.displayName = 'proto.transit_realtime.TripUpdate.TripProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.transit_realtime.TripUpdate.TripProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transit_realtime.TripUpdate.TripProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.TripProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    tripId: jspb.Message.getField(msg, 1),
    startDate: jspb.Message.getField(msg, 2),
    startTime: jspb.Message.getField(msg, 3),
    shapeId: jspb.Message.getField(msg, 4)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.transit_realtime.TripUpdate.TripProperties.extensions, proto.transit_realtime.TripUpdate.TripProperties.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transit_realtime.TripUpdate.TripProperties}
 */
proto.transit_realtime.TripUpdate.TripProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transit_realtime.TripUpdate.TripProperties;
  return proto.transit_realtime.TripUpdate.TripProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transit_realtime.TripUpdate.TripProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transit_realtime.TripUpdate.TripProperties}
 */
proto.transit_realtime.TripUpdate.TripProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTripId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShapeId(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.transit_realtime.TripUpdate.TripProperties.extensionsBinary,
        proto.transit_realtime.TripUpdate.TripProperties.prototype.getExtension,
        proto.transit_realtime.TripUpdate.TripProperties.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transit_realtime.TripUpdate.TripProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transit_realtime.TripUpdate.TripProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transit_realtime.TripUpdate.TripProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.transit_realtime.TripUpdate.TripProperties.extensionsBinary, proto.transit_realtime.TripUpdate.TripProperties.prototype.getExtension);
};


/**
 * optional string trip_id = 1;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.getTripId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.TripProperties.prototype.setTripId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.transit_realtime.TripUpdate.TripProperties.prototype.clearTripId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.hasTripId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string start_date = 2;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.TripProperties.prototype.setStartDate = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.transit_realtime.TripUpdate.TripProperties.prototype.clearStartDate = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.hasStartDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string start_time = 3;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.TripProperties.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.transit_realtime.TripUpdate.TripProperties.prototype.clearStartTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.hasStartTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string shape_id = 4;
 * @return {string}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.getShapeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.transit_realtime.TripUpdate.TripProperties.prototype.setShapeId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.transit_realtime.TripUpdate.TripProperties.prototype.clearShapeId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.TripProperties.prototype.hasShapeId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.TripUpdate.TripProperties.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.TripUpdate.TripProperties.extensionsBinary = {};

/**
 * required TripDescriptor trip = 1;
 * @return {!proto.transit_realtime.TripDescriptor}
 */
proto.transit_realtime.TripUpdate.prototype.getTrip = function() {
  return /** @type{!proto.transit_realtime.TripDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripDescriptor, 1, 1));
};


/** @param {!proto.transit_realtime.TripDescriptor} value */
proto.transit_realtime.TripUpdate.prototype.setTrip = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.transit_realtime.TripUpdate.prototype.clearTrip = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.prototype.hasTrip = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleDescriptor vehicle = 3;
 * @return {?proto.transit_realtime.VehicleDescriptor}
 */
proto.transit_realtime.TripUpdate.prototype.getVehicle = function() {
  return /** @type{?proto.transit_realtime.VehicleDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.VehicleDescriptor, 3));
};


/** @param {?proto.transit_realtime.VehicleDescriptor|undefined} value */
proto.transit_realtime.TripUpdate.prototype.setVehicle = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.transit_realtime.TripUpdate.prototype.clearVehicle = function() {
  this.setVehicle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated StopTimeUpdate stop_time_update = 2;
 * @return {!Array<!proto.transit_realtime.TripUpdate.StopTimeUpdate>}
 */
proto.transit_realtime.TripUpdate.prototype.getStopTimeUpdateList = function() {
  return /** @type{!Array<!proto.transit_realtime.TripUpdate.StopTimeUpdate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.transit_realtime.TripUpdate.StopTimeUpdate, 2));
};


/** @param {!Array<!proto.transit_realtime.TripUpdate.StopTimeUpdate>} value */
proto.transit_realtime.TripUpdate.prototype.setStopTimeUpdateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.transit_realtime.TripUpdate.StopTimeUpdate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.transit_realtime.TripUpdate.StopTimeUpdate}
 */
proto.transit_realtime.TripUpdate.prototype.addStopTimeUpdate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.transit_realtime.TripUpdate.StopTimeUpdate, opt_index);
};


proto.transit_realtime.TripUpdate.prototype.clearStopTimeUpdateList = function() {
  this.setStopTimeUpdateList([]);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.transit_realtime.TripUpdate.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 delay = 5;
 * @return {number}
 */
proto.transit_realtime.TripUpdate.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.transit_realtime.TripUpdate.prototype.setDelay = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.transit_realtime.TripUpdate.prototype.clearDelay = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.prototype.hasDelay = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TripProperties trip_properties = 6;
 * @return {?proto.transit_realtime.TripUpdate.TripProperties}
 */
proto.transit_realtime.TripUpdate.prototype.getTripProperties = function() {
  return /** @type{?proto.transit_realtime.TripUpdate.TripProperties} */ (
    jspb.Message.getWrapperField(this, proto.transit_realtime.TripUpdate.TripProperties, 6));
};


/** @param {?proto.transit_realtime.TripUpdate.TripProperties|undefined} value */
proto.transit_realtime.TripUpdate.prototype.setTripProperties = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.transit_realtime.TripUpdate.prototype.clearTripProperties = function() {
  this.setTripProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.transit_realtime.TripUpdate.prototype.hasTripProperties = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.transit_realtime.TripUpdate.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.transit_realtime.TripUpdate.extensionsBinary = {};

